line2 <- Line(rbind(c(0, 0), c(0, -1)))
line3 <- Line(rbind(c(0, -1), c(1, -1)))
lines <- sp::SpatialLines(list(
Lines(list(line1), ID="1"),
Lines(list(line2), ID="2"),
Lines(list(line3), ID="3")
))
# Initialize metric graph
graph <- metric_graph$new(edges = lines)
graph$plot(direction = TRUE)
# Create finite element mesh and compute matrices
h <- 0.01
graph$build_mesh(h = h)
graph$compute_fem()
# Define model parameters and construct spatio-temporal operator
t <- seq(from = 0, to = 10, length.out = 31)
kappa <- 5
sigma <- 10
gamma <- 0.1
rho <- 0.3
alpha <- 1
beta <- 1
op <- spacetime.operators(graph = graph, time = t,
kappa = kappa, sigma = sigma, alpha = alpha,
beta = beta, rho = rho, gamma = gamma)
op$plot_covariances(t.ind = 15, s.ind = 50, t.shift = c(-1, 0, 1))
# Define model parameters and construct spatio-temporal operator
t <- seq(from = 0, to = 10, length.out = 31)
t
# Define model parameters and construct spatio-temporal operator
t <- seq(from = 0, to = 10, length.out = 11)
t
t #Asumme observations over 10 days
kappa <- 5
sigma <- 10
gamma <- 0.1
rho <- 0.3
alpha <- 1
beta <- 1
op <- spacetime.operators(graph = graph, time = t,
kappa = kappa, sigma = sigma, alpha = alpha,
beta = beta, rho = rho, gamma = gamma)
op$plot_covariances(t.ind = 5, s.ind = 50, t.shift = c(-1, 0, 1))
op$plot_covariances(t.ind = 5, s.ind = 5, t.shift = c(-1, 0, 1))
op$plot_covariances(t.ind = 5, s.ind = 5, t.shift = c(-1, 0, 1))
op$plot_covariances(t.ind = 5, s.ind = 5, t.shift = c(0, 1))
op$plot_covariances(t.ind = 6, s.ind = 5, t.shift = c(-1, 0, 1))
op$plot_covariances(t.ind = 6, s.ind = 5, t.shift = c(0, 1))
op$plot_covariances(t.ind = 5, s.ind = 5, t.shift = c(0, 1))
op$plot_covariances(t.ind = 6, s.ind = 5, t.shift = c(0, 1))
# Simulate data
x <- simulate(op, nsim = 1)
n.obs <- 50
PtE <- cbind(sample(1:graph$nE, size = n.obs, replace = TRUE), runif(n.obs))
t.obs <- max(t) * runif(n.obs)
A <- op$make_A(PtE, t.obs)
sigma.e <- 0.01
Y <- as.vector(A %*% x + sigma.e * rnorm(n.obs))
graph$plot()x
x
plot(x)
plot(A)
# Simulate data
x <- simulate(op, nsim = 1)
n.obs <- 50
PtE <- cbind(sample(1:graph$nE, size = n.obs, replace = TRUE), runif(n.obs))
t.obs <- max(t) * runif(n.obs)
A <- op$make_A(PtE, t.obs)
sigma.e <- 0.01
Y <- as.vector(A %*% x + sigma.e * rnorm(n.obs))
df <- data.frame(y = as.matrix(Y), edge_number = PtE[,1],
distance_on_edge = PtE[,2],
time = t.obs)
graph$add_observations(data = df, normalized=TRUE,
group = "time")
# Estimate model parameters using rspde_lme
res <- rspde_lme(y ~ 1, loc_time = "time",
model = op,
parallel = TRUE)
# Estimate model parameters using rspde_lme
res <- rspde_lme(y ~ 1, loc_time = "time",
model = op,
parallel = TRUE)
# Display summary
summary(res)
op$plot_covariances(t.ind = 5, s.ind = 5, t.shift = c(-1, 0, 1))
op$plot_covariances(t.ind = 5, s.ind = 5, t.shift = c(0, 1))
op$plot_covariances(t.ind = 6, s.ind = 5, t.shift = c(0, 1))
op
str(op)
op$plot_covariances(t.ind = 6, s.ind = 5)
op$plot_covariances(t.ind = 5, s.ind = 5)
op$plot_covariances(t.ind = 0, s.ind = 5)
op$plot_covariances(t.ind = 1, s.ind = 5)
op$plot_covariances(t.ind = 2, s.ind = 5)
op$plot_covariances(t.ind = 3, s.ind = 5)
op$plot_covariances(t.ind = 4, s.ind = 5)
library(sp)
library(rSPDE)
library(MetricGraph)
# Assume a rive line going downstream
# Define graph edges
line1 <- Line(rbind( c(0, 1),c(0, 0)))
line2 <- Line(rbind(c(0, 0), c(0, -1)))
line3 <- Line(rbind(c(0, -1), c(1, -1)))
lines <- sp::SpatialLines(list(
Lines(list(line1), ID="1"),
Lines(list(line2), ID="2"),
Lines(list(line3), ID="3")
))
# Initialize metric graph
graph <- metric_graph$new(edges = lines)
graph$plot(direction = TRUE)
# Create finite element mesh and compute matrices
h <- 0.01
graph$build_mesh(h = h)
graph$compute_fem()
# Define model parameters and construct spatio-temporal operator
t <- seq(from = 0, to = 10, length.out = 11)
t #Asumme observations over 10 days
kappa <- 5
sigma <- 10
gamma <- 0.1
rho <- 0.3
alpha <- 1
beta <- 1
op <- spacetime.operators(graph = graph, time = t,
kappa = kappa, sigma = sigma, alpha = alpha,
beta = beta, rho = rho, gamma = gamma)
op$plot_covariances(t.ind = 5, s.ind = 5, t.shift = c(-1, 0, 1))
op$plot_covariances(t.ind = 5, s.ind = 5, t.shift = c(0, 1))
op$plot_covariances(t.ind = 1, s.ind = 5)
op$plot_covariances(t.ind = 2, s.ind = 5)
op$plot_covariances(t.ind = 3, s.ind = 5)
op$plot_covariances(t.ind = 4, s.ind = 5)
# Simulate data
x <- simulate(op, nsim = 1)
n.obs <- 50
PtE <- cbind(sample(1:graph$nE, size = n.obs, replace = TRUE), runif(n.obs))
t.obs <- max(t) * runif(n.obs)
A <- op$make_A(PtE, t.obs)
sigma.e <- 0.01
Y <- as.vector(A %*% x + sigma.e * rnorm(n.obs))
df <- data.frame(y = as.matrix(Y), edge_number = PtE[,1],
distance_on_edge = PtE[,2],
time = t.obs)
remotes::install_github("davidbolin/metricgraph", ref = "devel")
remotes::install_github("davidbolin/rspde", ref = "devel")
library(sp)
library(rSPDE)
library(MetricGraph)
# Assume a rive line going downstream
# Define graph edges
line1 <- Line(rbind( c(0, 1),c(0, 0)))
line2 <- Line(rbind(c(0, 0), c(0, -1)))
line3 <- Line(rbind(c(0, -1), c(1, -1)))
lines <- sp::SpatialLines(list(
Lines(list(line1), ID="1"),
Lines(list(line2), ID="2"),
Lines(list(line3), ID="3")
))
# Initialize metric graph
graph <- metric_graph$new(edges = lines)
graph$plot(direction = TRUE)
# Create finite element mesh and compute matrices
h <- 0.01
graph$build_mesh(h = h)
graph$compute_fem()
# Define model parameters and construct spatio-temporal operator
t <- seq(from = 0, to = 10, length.out = 11)
t #Asumme observations over 10 days
kappa <- 5
sigma <- 10
gamma <- 0.1
rho <- 0.3
alpha <- 1
beta <- 1
op <- spacetime.operators(graph = graph, time = t,
kappa = kappa, sigma = sigma, alpha = alpha,
beta = beta, rho = rho, gamma = gamma)
op$plot_covariances(t.ind = 5, s.ind = 5, t.shift = c(-1, 0, 1))
op$plot_covariances(t.ind = 5, s.ind = 5, t.shift = c(0, 1))
op$plot_covariances(t.ind = 1, s.ind = 5)
op$plot_covariances(t.ind = 2, s.ind = 5)
op$plot_covariances(t.ind = 3, s.ind = 5)
op$plot_covariances(t.ind = 4, s.ind = 5)
PtE
t.obs
library(sp)
library(rSPDE)
library(MetricGraph)
# Assume a rive line going downstream
# Define graph edges
line1 <- Line(rbind( c(0, 1),c(0, 0)))
line2 <- Line(rbind(c(0, 0), c(0, -1)))
line3 <- Line(rbind(c(0, -1), c(1, -1)))
lines <- sp::SpatialLines(list(
Lines(list(line1), ID="1"),
Lines(list(line2), ID="2"),
Lines(list(line3), ID="3")
))
# Initialize metric graph
graph <- metric_graph$new(edges = lines)
graph$plot(direction = TRUE)
# Create finite element mesh and compute matrices
h <- 0.01
graph$build_mesh(h = h)
graph$compute_fem()
# Define model parameters and construct spatio-temporal operator
t <- seq(from = 0, to = 10, length.out = 11)
t #Asumme observations over 10 days
kappa <- 5
sigma <- 10
gamma <- 0.1
rho <- 0.3
alpha <- 1
beta <- 1
op <- spacetime.operators(graph = graph, time = t,
kappa = kappa, sigma = sigma, alpha = alpha,
beta = beta, rho = rho, gamma = gamma)
op$plot_covariances(t.ind = 5, s.ind = 5, t.shift = c(-1, 0, 1))
op$plot_covariances(t.ind = 5, s.ind = 5, t.shift = c(0, 1))
op$plot_covariances(t.ind = 1, s.ind = 5)
op$plot_covariances(t.ind = 2, s.ind = 5)
op$plot_covariances(t.ind = 3, s.ind = 5)
op$plot_covariances(t.ind = 4, s.ind = 5)
# Simulate data
x <- simulate(op, nsim = 1)
n.obs <- 50
PtE <- cbind(sample(1:graph$nE, size = n.obs, replace = TRUE), runif(n.obs))
t.obs <- max(t) * runif(n.obs)
A <- op$make_A(PtE, t.obs)
library(sp)
library(rSPDE)
library(MetricGraph)
# Assume a rive line going downstream
# Define graph edges
line1 <- Line(rbind( c(0, 1),c(0, 0)))
line2 <- Line(rbind(c(0, 0), c(0, -1)))
line3 <- Line(rbind(c(0, -1), c(1, -1)))
lines <- sp::SpatialLines(list(
Lines(list(line1), ID="1"),
Lines(list(line2), ID="2"),
Lines(list(line3), ID="3")
))
# Initialize metric graph
graph <- metric_graph$new(edges = lines)
graph$plot(direction = TRUE)
# Create finite element mesh and compute matrices
h <- 0.01
graph$build_mesh(h = h)
graph$compute_fem()
# Define model parameters and construct spatio-temporal operator
t <- seq(from = 0, to = 10, length.out = 11)
t #Asumme observations over 10 days
kappa <- 5
sigma <- 10
gamma <- 0.1
rho <- 0.3
alpha <- 1
beta <- 1
op <- spacetime.operators(graph = graph, time = t,
kappa = kappa, sigma = sigma, alpha = alpha,
beta = beta, rho = rho, gamma = gamma,
graph_dirichlet = FALSE)
op$plot_covariances(t.ind = 5, s.ind = 5, t.shift = c(-1, 0, 1))
op$plot_covariances(t.ind = 5, s.ind = 5, t.shift = c(0, 1))
op$plot_covariances(t.ind = 1, s.ind = 5)
op$plot_covariances(t.ind = 2, s.ind = 5)
op$plot_covariances(t.ind = 3, s.ind = 5)
op$plot_covariances(t.ind = 4, s.ind = 5)
# Simulate data
x <- simulate(op, nsim = 1)
n.obs <- 50
PtE <- cbind(sample(1:graph$nE, size = n.obs, replace = TRUE), runif(n.obs))
t.obs <- max(t) * runif(n.obs)
A <- op$make_A(PtE, t.obs)
sigma.e <- 0.01
Y <- as.vector(A %*% x + sigma.e * rnorm(n.obs))
df <- data.frame(y = as.matrix(Y), edge_number = PtE[,1],
distance_on_edge = PtE[,2],
time = t.obs)
graph$add_observations(data = df, normalized=TRUE,
group = "time")
# Estimate model parameters using rspde_lme
res <- rspde_lme(y ~ 1, loc_time = "time",
model = op,
parallel = TRUE)
# Estimate model parameters using rspde_lme
res <- rspde_lme(y ~ 1, loc_time = "time",
model = op,
parallel = TRUE)
library(optimParallel)
install.packages("optimParallel")
library(sp)
library(rSPDE)
library(MetricGraph)
# Assume a rive line going downstream
# Define graph edges
line1 <- Line(rbind( c(0, 1),c(0, 0)))
line2 <- Line(rbind(c(0, 0), c(0, -1)))
line3 <- Line(rbind(c(0, -1), c(1, -1)))
lines <- sp::SpatialLines(list(
Lines(list(line1), ID="1"),
Lines(list(line2), ID="2"),
Lines(list(line3), ID="3")
))
# Initialize metric graph
graph <- metric_graph$new(edges = lines)
graph$plot(direction = TRUE)
# Create finite element mesh and compute matrices
h <- 0.01
graph$build_mesh(h = h)
graph$compute_fem()
# Define model parameters and construct spatio-temporal operator
t <- seq(from = 0, to = 10, length.out = 11)
t #Asumme observations over 10 days
kappa <- 5
sigma <- 10
gamma <- 0.1
rho <- 0.3
alpha <- 1
beta <- 1
op <- spacetime.operators(graph = graph, time = t,
kappa = kappa, sigma = sigma, alpha = alpha,
beta = beta, rho = rho, gamma = gamma,
graph_dirichlet = FALSE)
op$plot_covariances(t.ind = 5, s.ind = 5, t.shift = c(-1, 0, 1))
op$plot_covariances(t.ind = 5, s.ind = 5, t.shift = c(0, 1))
op$plot_covariances(t.ind = 1, s.ind = 5)
op$plot_covariances(t.ind = 2, s.ind = 5)
op$plot_covariances(t.ind = 3, s.ind = 5)
op$plot_covariances(t.ind = 4, s.ind = 5)
# Simulate data
x <- simulate(op, nsim = 1)
n.obs <- 50
PtE <- cbind(sample(1:graph$nE, size = n.obs, replace = TRUE), runif(n.obs))
t.obs <- max(t) * runif(n.obs)
A <- op$make_A(PtE, t.obs)
sigma.e <- 0.01
Y <- as.vector(A %*% x + sigma.e * rnorm(n.obs))
df <- data.frame(y = as.matrix(Y), edge_number = PtE[,1],
distance_on_edge = PtE[,2],
time = t.obs)
graph$add_observations(data = df, normalized=TRUE,
group = "time")
# Estimate model parameters using rspde_lme
res <- rspde_lme(y ~ 1, loc_time = "time",
model = op,
parallel = TRUE)
# Estimate model parameters using rspde_lme
res <- rspde_lme(y ~ 1, loc_time = "time",
model = op,
parallel = FALSE)
# Proof of concept for the space-time model
# The goal is to simulate the space-time model with a known location of the source of high pollution/values.
remotes::install_github("davidbolin/metricgraph", ref = "devel")
# Proof of concept for the space-time model
# The goal is to simulate the space-time model with a known location of the source of high pollution/values.
remotes::install_github("davidbolin/metricgraph", ref = "devel")
library(sp)
library(rSPDE)
library(MetricGraph)
# Assume a rive line going downstream
# Define graph edges
line1 <- Line(rbind( c(0, 1),c(0, 0)))
line2 <- Line(rbind(c(0, 0), c(0, -1)))
line3 <- Line(rbind(c(0, -1), c(1, -1)))
lines <- sp::SpatialLines(list(
Lines(list(line1), ID="1"),
Lines(list(line2), ID="2"),
Lines(list(line3), ID="3")
))
# Initialize metric graph
graph <- metric_graph$new(edges = lines)
graph$plot(direction = TRUE)
# Create finite element mesh and compute matrices
h <- 0.01
graph$build_mesh(h = h)
graph$compute_fem()
# Define model parameters and construct spatio-temporal operator
t <- seq(from = 0, to = 10, length.out = 11)
t #Asumme observations over 10 days
kappa <- 5
sigma <- 10
gamma <- 0.1
rho <- 0.3
alpha <- 1
beta <- 1
op <- spacetime.operators(graph = graph, time = t,
kappa = kappa, sigma = sigma, alpha = alpha,
beta = beta, rho = rho, gamma = gamma)
op$plot_covariances(t.ind = 5, s.ind = 5, t.shift = c(-1, 0, 1))
op$plot_covariances(t.ind = 5, s.ind = 5, t.shift = c(0, 1))
op$plot_covariances(t.ind = 1, s.ind = 5)
op$plot_covariances(t.ind = 2, s.ind = 5)
op$plot_covariances(t.ind = 3, s.ind = 5)
op$plot_covariances(t.ind = 4, s.ind = 5)
# Simulate data
x <- simulate(op, nsim = 1)
n.obs <- 50
PtE <- cbind(sample(1:graph$nE, size = n.obs, replace = TRUE), runif(n.obs))
t.obs <- max(t) * runif(n.obs)
A <- op$make_A(PtE, t.obs)
sigma.e <- 0.01
Y <- as.vector(A %*% x + sigma.e * rnorm(n.obs))
op <- spacetime.operators(graph = graph, time = t,
kappa = kappa, sigma = sigma, alpha = alpha,
beta = beta, rho = rho, gamma = gamma,
graph_dirichlet = FALSE)
op$plot_covariances(t.ind = 5, s.ind = 5, t.shift = c(-1, 0, 1))
op$plot_covariances(t.ind = 5, s.ind = 5, t.shift = c(0, 1))
op$plot_covariances(t.ind = 1, s.ind = 5)
op$plot_covariances(t.ind = 2, s.ind = 5)
op$plot_covariances(t.ind = 3, s.ind = 5)
op$plot_covariances(t.ind = 4, s.ind = 5)
# Simulate data
x <- simulate(op, nsim = 1)
n.obs <- 50
PtE <- cbind(sample(1:graph$nE, size = n.obs, replace = TRUE), runif(n.obs))
t.obs <- max(t) * runif(n.obs)
A <- op$make_A(PtE, t.obs)
sigma.e <- 0.01
Y <- as.vector(A %*% x + sigma.e * rnorm(n.obs))
df <- data.frame(y = as.matrix(Y), edge_number = PtE[,1],
distance_on_edge = PtE[,2],
time = t.obs)
graph$add_observations(data = df, normalized=TRUE,
group = "time")
# Estimate model parameters using rspde_lme
res <- rspde_lme(y ~ 1, loc_time = "time",
model = op,
parallel = FALSE)
# Proof of concept for the space-time model
# The goal is to simulate the space-time model with a known location of the source of high pollution/values.
remotes::install_github("davidbolin/metricgraph", ref = "devel")
pressure_level <- 300
models <- c("nig_cor", "nig_indep", "gauss_cor", "gauss_indep")
grid_data <- read.table(paste0("~/Documents/Results/grid_data_", pressure_level, ".txt"), header = TRUE)
# Function to check for missing files
check_missing_files <- function(grid_data, pressure_level, model) {
missing_grid_ids <- vector()
# Loop through each grid ID
for (i in 1:nrow(grid_data)) {
grid_id <- grid_data$GridID[i]
n_pred <- grid_data$n_pred[i]
# Check if n_pred is greater than or equal to 100
if (n_pred >= 100) {
file_path <- paste0("~/Documents/Results/", pressure_level, "/", model, "/", model, "_", grid_id, "_new.RData")
# Check if the file exists
if (!file.exists(file_path)) {
missing_grid_ids <- c(missing_grid_ids, grid_id)
}
}
}
return(missing_grid_ids)
}
missing_grid_ids_list <- list()
for (model in models) {
missing_grid_ids_list[[model]] <- check_missing_files(grid_data, pressure_level, model)
}
pressure_level <- 1000
models <- c("nig_cor", "nig_indep", "gauss_cor", "gauss_indep")
grid_data <- read.table(paste0("~/Documents/Results/grid_data_", pressure_level, ".txt"), header = TRUE)
# Function to check for missing files
check_missing_files <- function(grid_data, pressure_level, model) {
missing_grid_ids <- vector()
# Loop through each grid ID
for (i in 1:nrow(grid_data)) {
grid_id <- grid_data$GridID[i]
n_pred <- grid_data$n_pred[i]
# Check if n_pred is greater than or equal to 100
if (n_pred >= 100) {
file_path <- paste0("~/Documents/Results/", pressure_level, "/", model, "/", model, "_", grid_id, "_new.RData")
# Check if the file exists
if (!file.exists(file_path)) {
missing_grid_ids <- c(missing_grid_ids, grid_id)
}
}
}
return(missing_grid_ids)
}
missing_grid_ids_list <- list()
for (model in models) {
missing_grid_ids_list[[model]] <- check_missing_files(grid_data, pressure_level, model)
}
pressure_level <- 10
models <- c("nig_cor", "nig_indep", "gauss_cor", "gauss_indep")
grid_data <- read.table(paste0("~/Documents/Results/grid_data_", pressure_level, ".txt"), header = TRUE)
# Function to check for missing files
check_missing_files <- function(grid_data, pressure_level, model) {
missing_grid_ids <- vector()
# Loop through each grid ID
for (i in 1:nrow(grid_data)) {
grid_id <- grid_data$GridID[i]
n_pred <- grid_data$n_pred[i]
# Check if n_pred is greater than or equal to 100
if (n_pred >= 100) {
file_path <- paste0("~/Documents/Results/", pressure_level, "/", model, "/", model, "_", grid_id, "_new.RData")
# Check if the file exists
if (!file.exists(file_path)) {
missing_grid_ids <- c(missing_grid_ids, grid_id)
}
}
}
return(missing_grid_ids)
}
missing_grid_ids_list <- list()
for (model in models) {
missing_grid_ids_list[[model]] <- check_missing_files(grid_data, pressure_level, model)
}
setwd("~/Documents/Papers/Argo-SPDE")
